// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `rpc.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:Record)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Record {
    // message fields
    // @@protoc_insertion_point(field:Record.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:Record.value)
    pub value: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:Record.timeReceived)
    pub timeReceived: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Record.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Record {
    fn default() -> &'a Record {
        <Record as ::protobuf::Message>::default_instance()
    }
}

impl Record {
    pub fn new() -> Record {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &Record| { &m.key },
            |m: &mut Record| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Record| { &m.value },
            |m: &mut Record| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timeReceived",
            |m: &Record| { &m.timeReceived },
            |m: &mut Record| { &mut m.timeReceived },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Record>(
            "Record",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Record {
    const NAME: &'static str = "Record";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                18 => {
                    self.value = is.read_bytes()?;
                },
                42 => {
                    self.timeReceived = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        if !self.timeReceived.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.timeReceived);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        if !self.timeReceived.is_empty() {
            os.write_string(5, &self.timeReceived)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Record {
        Record::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.timeReceived.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Record {
        static instance: Record = Record {
            key: ::std::vec::Vec::new(),
            value: ::std::vec::Vec::new(),
            timeReceived: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Record {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Record").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Record {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Record {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Message)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Message {
    // message fields
    // @@protoc_insertion_point(field:Message.type)
    pub type_: ::protobuf::EnumOrUnknown<message::MessageType>,
    // @@protoc_insertion_point(field:Message.clusterLevelRaw)
    pub clusterLevelRaw: i32,
    // @@protoc_insertion_point(field:Message.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:Message.record)
    pub record: ::protobuf::MessageField<Record>,
    // @@protoc_insertion_point(field:Message.closerPeers)
    pub closerPeers: ::std::vec::Vec<message::Peer>,
    // @@protoc_insertion_point(field:Message.providerPeers)
    pub providerPeers: ::std::vec::Vec<message::Peer>,
    // special fields
    // @@protoc_insertion_point(special_field:Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Message| { &m.type_ },
            |m: &mut Message| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "clusterLevelRaw",
            |m: &Message| { &m.clusterLevelRaw },
            |m: &mut Message| { &mut m.clusterLevelRaw },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &Message| { &m.key },
            |m: &mut Message| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Record>(
            "record",
            |m: &Message| { &m.record },
            |m: &mut Message| { &mut m.record },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "closerPeers",
            |m: &Message| { &m.closerPeers },
            |m: &mut Message| { &mut m.closerPeers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "providerPeers",
            |m: &Message| { &m.providerPeers },
            |m: &mut Message| { &mut m.providerPeers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                80 => {
                    self.clusterLevelRaw = is.read_int32()?;
                },
                18 => {
                    self.key = is.read_bytes()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.record)?;
                },
                66 => {
                    self.closerPeers.push(is.read_message()?);
                },
                74 => {
                    self.providerPeers.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(message::MessageType::PUT_VALUE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.clusterLevelRaw != 0 {
            my_size += ::protobuf::rt::int32_size(10, self.clusterLevelRaw);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.key);
        }
        if let Some(v) = self.record.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.closerPeers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.providerPeers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(message::MessageType::PUT_VALUE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.clusterLevelRaw != 0 {
            os.write_int32(10, self.clusterLevelRaw)?;
        }
        if !self.key.is_empty() {
            os.write_bytes(2, &self.key)?;
        }
        if let Some(v) = self.record.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.closerPeers {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        for v in &self.providerPeers {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(message::MessageType::PUT_VALUE);
        self.clusterLevelRaw = 0;
        self.key.clear();
        self.record.clear();
        self.closerPeers.clear();
        self.providerPeers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: Message = Message {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            clusterLevelRaw: 0,
            key: ::std::vec::Vec::new(),
            record: ::protobuf::MessageField::none(),
            closerPeers: ::std::vec::Vec::new(),
            providerPeers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Message`
pub mod message {
    // @@protoc_insertion_point(message:Message.Peer)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Peer {
        // message fields
        // @@protoc_insertion_point(field:Message.Peer.id)
        pub id: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:Message.Peer.addrs)
        pub addrs: ::std::vec::Vec<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:Message.Peer.connection)
        pub connection: ::protobuf::EnumOrUnknown<ConnectionType>,
        // special fields
        // @@protoc_insertion_point(special_field:Message.Peer.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Peer {
        fn default() -> &'a Peer {
            <Peer as ::protobuf::Message>::default_instance()
        }
    }

    impl Peer {
        pub fn new() -> Peer {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "id",
                |m: &Peer| { &m.id },
                |m: &mut Peer| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "addrs",
                |m: &Peer| { &m.addrs },
                |m: &mut Peer| { &mut m.addrs },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "connection",
                |m: &Peer| { &m.connection },
                |m: &mut Peer| { &mut m.connection },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Peer>(
                "Message.Peer",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Peer {
        const NAME: &'static str = "Peer";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.id = is.read_bytes()?;
                    },
                    18 => {
                        self.addrs.push(is.read_bytes()?);
                    },
                    24 => {
                        self.connection = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.id.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.id);
            }
            for value in &self.addrs {
                my_size += ::protobuf::rt::bytes_size(2, &value);
            };
            if self.connection != ::protobuf::EnumOrUnknown::new(ConnectionType::NOT_CONNECTED) {
                my_size += ::protobuf::rt::int32_size(3, self.connection.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.id.is_empty() {
                os.write_bytes(1, &self.id)?;
            }
            for v in &self.addrs {
                os.write_bytes(2, &v)?;
            };
            if self.connection != ::protobuf::EnumOrUnknown::new(ConnectionType::NOT_CONNECTED) {
                os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.connection))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Peer {
            Peer::new()
        }

        fn clear(&mut self) {
            self.id.clear();
            self.addrs.clear();
            self.connection = ::protobuf::EnumOrUnknown::new(ConnectionType::NOT_CONNECTED);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Peer {
            static instance: Peer = Peer {
                id: ::std::vec::Vec::new(),
                addrs: ::std::vec::Vec::new(),
                connection: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Peer {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Message.Peer").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Peer {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Peer {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:Message.MessageType)
    pub enum MessageType {
        // @@protoc_insertion_point(enum_value:Message.MessageType.PUT_VALUE)
        PUT_VALUE = 0,
        // @@protoc_insertion_point(enum_value:Message.MessageType.GET_VALUE)
        GET_VALUE = 1,
        // @@protoc_insertion_point(enum_value:Message.MessageType.ADD_PROVIDER)
        ADD_PROVIDER = 2,
        // @@protoc_insertion_point(enum_value:Message.MessageType.GET_PROVIDERS)
        GET_PROVIDERS = 3,
        // @@protoc_insertion_point(enum_value:Message.MessageType.FIND_NODE)
        FIND_NODE = 4,
        // @@protoc_insertion_point(enum_value:Message.MessageType.PING)
        PING = 5,
    }

    impl ::protobuf::Enum for MessageType {
        const NAME: &'static str = "MessageType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<MessageType> {
            match value {
                0 => ::std::option::Option::Some(MessageType::PUT_VALUE),
                1 => ::std::option::Option::Some(MessageType::GET_VALUE),
                2 => ::std::option::Option::Some(MessageType::ADD_PROVIDER),
                3 => ::std::option::Option::Some(MessageType::GET_PROVIDERS),
                4 => ::std::option::Option::Some(MessageType::FIND_NODE),
                5 => ::std::option::Option::Some(MessageType::PING),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<MessageType> {
            match str {
                "PUT_VALUE" => ::std::option::Option::Some(MessageType::PUT_VALUE),
                "GET_VALUE" => ::std::option::Option::Some(MessageType::GET_VALUE),
                "ADD_PROVIDER" => ::std::option::Option::Some(MessageType::ADD_PROVIDER),
                "GET_PROVIDERS" => ::std::option::Option::Some(MessageType::GET_PROVIDERS),
                "FIND_NODE" => ::std::option::Option::Some(MessageType::FIND_NODE),
                "PING" => ::std::option::Option::Some(MessageType::PING),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [MessageType] = &[
            MessageType::PUT_VALUE,
            MessageType::GET_VALUE,
            MessageType::ADD_PROVIDER,
            MessageType::GET_PROVIDERS,
            MessageType::FIND_NODE,
            MessageType::PING,
        ];
    }

    impl ::protobuf::EnumFull for MessageType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Message.MessageType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for MessageType {
        fn default() -> Self {
            MessageType::PUT_VALUE
        }
    }

    impl MessageType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MessageType>("Message.MessageType")
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:Message.ConnectionType)
    pub enum ConnectionType {
        // @@protoc_insertion_point(enum_value:Message.ConnectionType.NOT_CONNECTED)
        NOT_CONNECTED = 0,
        // @@protoc_insertion_point(enum_value:Message.ConnectionType.CONNECTED)
        CONNECTED = 1,
        // @@protoc_insertion_point(enum_value:Message.ConnectionType.CAN_CONNECT)
        CAN_CONNECT = 2,
        // @@protoc_insertion_point(enum_value:Message.ConnectionType.CANNOT_CONNECT)
        CANNOT_CONNECT = 3,
    }

    impl ::protobuf::Enum for ConnectionType {
        const NAME: &'static str = "ConnectionType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ConnectionType> {
            match value {
                0 => ::std::option::Option::Some(ConnectionType::NOT_CONNECTED),
                1 => ::std::option::Option::Some(ConnectionType::CONNECTED),
                2 => ::std::option::Option::Some(ConnectionType::CAN_CONNECT),
                3 => ::std::option::Option::Some(ConnectionType::CANNOT_CONNECT),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ConnectionType> {
            match str {
                "NOT_CONNECTED" => ::std::option::Option::Some(ConnectionType::NOT_CONNECTED),
                "CONNECTED" => ::std::option::Option::Some(ConnectionType::CONNECTED),
                "CAN_CONNECT" => ::std::option::Option::Some(ConnectionType::CAN_CONNECT),
                "CANNOT_CONNECT" => ::std::option::Option::Some(ConnectionType::CANNOT_CONNECT),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ConnectionType] = &[
            ConnectionType::NOT_CONNECTED,
            ConnectionType::CONNECTED,
            ConnectionType::CAN_CONNECT,
            ConnectionType::CANNOT_CONNECT,
        ];
    }

    impl ::protobuf::EnumFull for ConnectionType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Message.ConnectionType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ConnectionType {
        fn default() -> Self {
            ConnectionType::NOT_CONNECTED
        }
    }

    impl ConnectionType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ConnectionType>("Message.ConnectionType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\trpc.proto\"T\n\x06Record\x12\x10\n\x03key\x18\x01\x20\x01(\x0cR\x03k\
    ey\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05value\x12\"\n\x0ctimeRece\
    ived\x18\x05\x20\x01(\tR\x0ctimeReceived\"\xa1\x04\n\x07Message\x12(\n\
    \x04type\x18\x01\x20\x01(\x0e2\x14.Message.MessageTypeR\x04type\x12(\n\
    \x0fclusterLevelRaw\x18\n\x20\x01(\x05R\x0fclusterLevelRaw\x12\x10\n\x03\
    key\x18\x02\x20\x01(\x0cR\x03key\x12\x1f\n\x06record\x18\x03\x20\x01(\
    \x0b2\x07.RecordR\x06record\x12/\n\x0bcloserPeers\x18\x08\x20\x03(\x0b2\
    \r.Message.PeerR\x0bcloserPeers\x123\n\rproviderPeers\x18\t\x20\x03(\x0b\
    2\r.Message.PeerR\rproviderPeers\x1ae\n\x04Peer\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\x0cR\x02id\x12\x14\n\x05addrs\x18\x02\x20\x03(\x0cR\x05addrs\
    \x127\n\nconnection\x18\x03\x20\x01(\x0e2\x17.Message.ConnectionTypeR\nc\
    onnection\"i\n\x0bMessageType\x12\r\n\tPUT_VALUE\x10\0\x12\r\n\tGET_VALU\
    E\x10\x01\x12\x10\n\x0cADD_PROVIDER\x10\x02\x12\x11\n\rGET_PROVIDERS\x10\
    \x03\x12\r\n\tFIND_NODE\x10\x04\x12\x08\n\x04PING\x10\x05\"W\n\x0eConnec\
    tionType\x12\x11\n\rNOT_CONNECTED\x10\0\x12\r\n\tCONNECTED\x10\x01\x12\
    \x0f\n\x0bCAN_CONNECT\x10\x02\x12\x12\n\x0eCANNOT_CONNECT\x10\x03b\x06pr\
    oto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Record::generated_message_descriptor_data());
            messages.push(Message::generated_message_descriptor_data());
            messages.push(message::Peer::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(message::MessageType::generated_enum_descriptor_data());
            enums.push(message::ConnectionType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
