// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `circuit.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:Voucher)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Voucher {
    // message fields
    // @@protoc_insertion_point(field:Voucher.relay)
    pub relay: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:Voucher.peer)
    pub peer: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:Voucher.expiration)
    pub expiration: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:Voucher.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Voucher {
    fn default() -> &'a Voucher {
        <Voucher as ::protobuf::Message>::default_instance()
    }
}

impl Voucher {
    pub fn new() -> Voucher {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "relay",
            |m: &Voucher| { &m.relay },
            |m: &mut Voucher| { &mut m.relay },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "peer",
            |m: &Voucher| { &m.peer },
            |m: &mut Voucher| { &mut m.peer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "expiration",
            |m: &Voucher| { &m.expiration },
            |m: &mut Voucher| { &mut m.expiration },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Voucher>(
            "Voucher",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Voucher {
    const NAME: &'static str = "Voucher";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.relay = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.peer = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.expiration = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.relay.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.peer.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.expiration {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.relay.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.peer.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.expiration {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Voucher {
        Voucher::new()
    }

    fn clear(&mut self) {
        self.relay = ::std::option::Option::None;
        self.peer = ::std::option::Option::None;
        self.expiration = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Voucher {
        static instance: Voucher = Voucher {
            relay: ::std::option::Option::None,
            peer: ::std::option::Option::None,
            expiration: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Voucher {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Voucher").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Voucher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Voucher {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:HopMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HopMessage {
    // message fields
    // @@protoc_insertion_point(field:HopMessage.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<hop_message::Type>>,
    // @@protoc_insertion_point(field:HopMessage.peer)
    pub peer: ::protobuf::MessageField<Peer>,
    // @@protoc_insertion_point(field:HopMessage.reservation)
    pub reservation: ::protobuf::MessageField<Reservation>,
    // @@protoc_insertion_point(field:HopMessage.limit)
    pub limit: ::protobuf::MessageField<Limit>,
    // @@protoc_insertion_point(field:HopMessage.status)
    pub status: ::std::option::Option<::protobuf::EnumOrUnknown<Status>>,
    // special fields
    // @@protoc_insertion_point(special_field:HopMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HopMessage {
    fn default() -> &'a HopMessage {
        <HopMessage as ::protobuf::Message>::default_instance()
    }
}

impl HopMessage {
    pub fn new() -> HopMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &HopMessage| { &m.type_ },
            |m: &mut HopMessage| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Peer>(
            "peer",
            |m: &HopMessage| { &m.peer },
            |m: &mut HopMessage| { &mut m.peer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Reservation>(
            "reservation",
            |m: &HopMessage| { &m.reservation },
            |m: &mut HopMessage| { &mut m.reservation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Limit>(
            "limit",
            |m: &HopMessage| { &m.limit },
            |m: &mut HopMessage| { &mut m.limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &HopMessage| { &m.status },
            |m: &mut HopMessage| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HopMessage>(
            "HopMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HopMessage {
    const NAME: &'static str = "HopMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.peer)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.reservation)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.limit)?;
                },
                40 => {
                    self.status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.peer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.reservation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.limit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status {
            my_size += ::protobuf::rt::int32_size(5, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.peer.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.reservation.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.limit.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.status {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HopMessage {
        HopMessage::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.peer.clear();
        self.reservation.clear();
        self.limit.clear();
        self.status = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HopMessage {
        static instance: HopMessage = HopMessage {
            type_: ::std::option::Option::None,
            peer: ::protobuf::MessageField::none(),
            reservation: ::protobuf::MessageField::none(),
            limit: ::protobuf::MessageField::none(),
            status: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HopMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HopMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HopMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HopMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `HopMessage`
pub mod hop_message {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:HopMessage.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:HopMessage.Type.RESERVE)
        RESERVE = 0,
        // @@protoc_insertion_point(enum_value:HopMessage.Type.CONNECT)
        CONNECT = 1,
        // @@protoc_insertion_point(enum_value:HopMessage.Type.STATUS)
        STATUS = 2,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::RESERVE),
                1 => ::std::option::Option::Some(Type::CONNECT),
                2 => ::std::option::Option::Some(Type::STATUS),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Type> {
            match str {
                "RESERVE" => ::std::option::Option::Some(Type::RESERVE),
                "CONNECT" => ::std::option::Option::Some(Type::CONNECT),
                "STATUS" => ::std::option::Option::Some(Type::STATUS),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::RESERVE,
            Type::CONNECT,
            Type::STATUS,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("HopMessage.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::RESERVE
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("HopMessage.Type")
        }
    }
}

// @@protoc_insertion_point(message:StopMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StopMessage {
    // message fields
    // @@protoc_insertion_point(field:StopMessage.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<stop_message::Type>>,
    // @@protoc_insertion_point(field:StopMessage.peer)
    pub peer: ::protobuf::MessageField<Peer>,
    // @@protoc_insertion_point(field:StopMessage.limit)
    pub limit: ::protobuf::MessageField<Limit>,
    // @@protoc_insertion_point(field:StopMessage.status)
    pub status: ::std::option::Option<::protobuf::EnumOrUnknown<Status>>,
    // special fields
    // @@protoc_insertion_point(special_field:StopMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StopMessage {
    fn default() -> &'a StopMessage {
        <StopMessage as ::protobuf::Message>::default_instance()
    }
}

impl StopMessage {
    pub fn new() -> StopMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &StopMessage| { &m.type_ },
            |m: &mut StopMessage| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Peer>(
            "peer",
            |m: &StopMessage| { &m.peer },
            |m: &mut StopMessage| { &mut m.peer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Limit>(
            "limit",
            |m: &StopMessage| { &m.limit },
            |m: &mut StopMessage| { &mut m.limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &StopMessage| { &m.status },
            |m: &mut StopMessage| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StopMessage>(
            "StopMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StopMessage {
    const NAME: &'static str = "StopMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.peer)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.limit)?;
                },
                32 => {
                    self.status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.peer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.limit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status {
            my_size += ::protobuf::rt::int32_size(4, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.peer.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.limit.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.status {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StopMessage {
        StopMessage::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.peer.clear();
        self.limit.clear();
        self.status = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StopMessage {
        static instance: StopMessage = StopMessage {
            type_: ::std::option::Option::None,
            peer: ::protobuf::MessageField::none(),
            limit: ::protobuf::MessageField::none(),
            status: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StopMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StopMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StopMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `StopMessage`
pub mod stop_message {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:StopMessage.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:StopMessage.Type.CONNECT)
        CONNECT = 0,
        // @@protoc_insertion_point(enum_value:StopMessage.Type.STATUS)
        STATUS = 1,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::CONNECT),
                1 => ::std::option::Option::Some(Type::STATUS),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Type> {
            match str {
                "CONNECT" => ::std::option::Option::Some(Type::CONNECT),
                "STATUS" => ::std::option::Option::Some(Type::STATUS),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::CONNECT,
            Type::STATUS,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("StopMessage.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::CONNECT
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("StopMessage.Type")
        }
    }
}

// @@protoc_insertion_point(message:Peer)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Peer {
    // message fields
    // @@protoc_insertion_point(field:Peer.id)
    pub id: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:Peer.addrs)
    pub addrs: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:Peer.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Peer {
    fn default() -> &'a Peer {
        <Peer as ::protobuf::Message>::default_instance()
    }
}

impl Peer {
    pub fn new() -> Peer {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "id",
            |m: &Peer| { &m.id },
            |m: &mut Peer| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "addrs",
            |m: &Peer| { &m.addrs },
            |m: &mut Peer| { &mut m.addrs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Peer>(
            "Peer",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Peer {
    const NAME: &'static str = "Peer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.addrs.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        for value in &self.addrs {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id.as_ref() {
            os.write_bytes(1, v)?;
        }
        for v in &self.addrs {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Peer {
        Peer::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.addrs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Peer {
        static instance: Peer = Peer {
            id: ::std::option::Option::None,
            addrs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Peer {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Peer").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Peer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Peer {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Reservation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Reservation {
    // message fields
    // @@protoc_insertion_point(field:Reservation.expire)
    pub expire: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:Reservation.addrs)
    pub addrs: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:Reservation.voucher)
    pub voucher: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:Reservation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Reservation {
    fn default() -> &'a Reservation {
        <Reservation as ::protobuf::Message>::default_instance()
    }
}

impl Reservation {
    pub fn new() -> Reservation {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "expire",
            |m: &Reservation| { &m.expire },
            |m: &mut Reservation| { &mut m.expire },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "addrs",
            |m: &Reservation| { &m.addrs },
            |m: &mut Reservation| { &mut m.addrs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "voucher",
            |m: &Reservation| { &m.voucher },
            |m: &mut Reservation| { &mut m.voucher },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Reservation>(
            "Reservation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Reservation {
    const NAME: &'static str = "Reservation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.expire = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.addrs.push(is.read_bytes()?);
                },
                26 => {
                    self.voucher = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.expire {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        for value in &self.addrs {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        if let Some(v) = self.voucher.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.expire {
            os.write_uint64(1, v)?;
        }
        for v in &self.addrs {
            os.write_bytes(2, &v)?;
        };
        if let Some(v) = self.voucher.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Reservation {
        Reservation::new()
    }

    fn clear(&mut self) {
        self.expire = ::std::option::Option::None;
        self.addrs.clear();
        self.voucher = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Reservation {
        static instance: Reservation = Reservation {
            expire: ::std::option::Option::None,
            addrs: ::std::vec::Vec::new(),
            voucher: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Reservation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Reservation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Reservation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Reservation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Limit)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Limit {
    // message fields
    // @@protoc_insertion_point(field:Limit.duration)
    pub duration: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:Limit.data)
    pub data: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:Limit.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Limit {
    fn default() -> &'a Limit {
        <Limit as ::protobuf::Message>::default_instance()
    }
}

impl Limit {
    pub fn new() -> Limit {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "duration",
            |m: &Limit| { &m.duration },
            |m: &mut Limit| { &mut m.duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &Limit| { &m.data },
            |m: &mut Limit| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Limit>(
            "Limit",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Limit {
    const NAME: &'static str = "Limit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.duration = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.data = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.duration {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.data {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.duration {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.data {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Limit {
        Limit::new()
    }

    fn clear(&mut self) {
        self.duration = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Limit {
        static instance: Limit = Limit {
            duration: ::std::option::Option::None,
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Limit {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Limit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Limit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Limit {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:Status)
pub enum Status {
    // @@protoc_insertion_point(enum_value:Status.UNUSED)
    UNUSED = 0,
    // @@protoc_insertion_point(enum_value:Status.OK)
    OK = 100,
    // @@protoc_insertion_point(enum_value:Status.RESERVATION_REFUSED)
    RESERVATION_REFUSED = 200,
    // @@protoc_insertion_point(enum_value:Status.RESOURCE_LIMIT_EXCEEDED)
    RESOURCE_LIMIT_EXCEEDED = 201,
    // @@protoc_insertion_point(enum_value:Status.PERMISSION_DENIED)
    PERMISSION_DENIED = 202,
    // @@protoc_insertion_point(enum_value:Status.CONNECTION_FAILED)
    CONNECTION_FAILED = 203,
    // @@protoc_insertion_point(enum_value:Status.NO_RESERVATION)
    NO_RESERVATION = 204,
    // @@protoc_insertion_point(enum_value:Status.MALFORMED_MESSAGE)
    MALFORMED_MESSAGE = 400,
    // @@protoc_insertion_point(enum_value:Status.UNEXPECTED_MESSAGE)
    UNEXPECTED_MESSAGE = 401,
}

impl ::protobuf::Enum for Status {
    const NAME: &'static str = "Status";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Status> {
        match value {
            0 => ::std::option::Option::Some(Status::UNUSED),
            100 => ::std::option::Option::Some(Status::OK),
            200 => ::std::option::Option::Some(Status::RESERVATION_REFUSED),
            201 => ::std::option::Option::Some(Status::RESOURCE_LIMIT_EXCEEDED),
            202 => ::std::option::Option::Some(Status::PERMISSION_DENIED),
            203 => ::std::option::Option::Some(Status::CONNECTION_FAILED),
            204 => ::std::option::Option::Some(Status::NO_RESERVATION),
            400 => ::std::option::Option::Some(Status::MALFORMED_MESSAGE),
            401 => ::std::option::Option::Some(Status::UNEXPECTED_MESSAGE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<Status> {
        match str {
            "UNUSED" => ::std::option::Option::Some(Status::UNUSED),
            "OK" => ::std::option::Option::Some(Status::OK),
            "RESERVATION_REFUSED" => ::std::option::Option::Some(Status::RESERVATION_REFUSED),
            "RESOURCE_LIMIT_EXCEEDED" => ::std::option::Option::Some(Status::RESOURCE_LIMIT_EXCEEDED),
            "PERMISSION_DENIED" => ::std::option::Option::Some(Status::PERMISSION_DENIED),
            "CONNECTION_FAILED" => ::std::option::Option::Some(Status::CONNECTION_FAILED),
            "NO_RESERVATION" => ::std::option::Option::Some(Status::NO_RESERVATION),
            "MALFORMED_MESSAGE" => ::std::option::Option::Some(Status::MALFORMED_MESSAGE),
            "UNEXPECTED_MESSAGE" => ::std::option::Option::Some(Status::UNEXPECTED_MESSAGE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Status] = &[
        Status::UNUSED,
        Status::OK,
        Status::RESERVATION_REFUSED,
        Status::RESOURCE_LIMIT_EXCEEDED,
        Status::PERMISSION_DENIED,
        Status::CONNECTION_FAILED,
        Status::NO_RESERVATION,
        Status::MALFORMED_MESSAGE,
        Status::UNEXPECTED_MESSAGE,
    ];
}

impl ::protobuf::EnumFull for Status {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Status").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            Status::UNUSED => 0,
            Status::OK => 1,
            Status::RESERVATION_REFUSED => 2,
            Status::RESOURCE_LIMIT_EXCEEDED => 3,
            Status::PERMISSION_DENIED => 4,
            Status::CONNECTION_FAILED => 5,
            Status::NO_RESERVATION => 6,
            Status::MALFORMED_MESSAGE => 7,
            Status::UNEXPECTED_MESSAGE => 8,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Status {
    fn default() -> Self {
        Status::UNUSED
    }
}

impl Status {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Status>("Status")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rcircuit.proto\"\x84\x01\n\x07Voucher\x12\x19\n\x05relay\x18\x01\x20\
    \x01(\x0cH\0R\x05relay\x88\x01\x01\x12\x17\n\x04peer\x18\x02\x20\x01(\
    \x0cH\x01R\x04peer\x88\x01\x01\x12#\n\nexpiration\x18\x03\x20\x01(\x04H\
    \x02R\nexpiration\x88\x01\x01B\x08\n\x06_relayB\x07\n\x05_peerB\r\n\x0b_\
    expiration\"\xba\x02\n\nHopMessage\x12)\n\x04type\x18\x01\x20\x01(\x0e2\
    \x10.HopMessage.TypeH\0R\x04type\x88\x01\x01\x12\x1e\n\x04peer\x18\x02\
    \x20\x01(\x0b2\x05.PeerH\x01R\x04peer\x88\x01\x01\x123\n\x0breservation\
    \x18\x03\x20\x01(\x0b2\x0c.ReservationH\x02R\x0breservation\x88\x01\x01\
    \x12!\n\x05limit\x18\x04\x20\x01(\x0b2\x06.LimitH\x03R\x05limit\x88\x01\
    \x01\x12$\n\x06status\x18\x05\x20\x01(\x0e2\x07.StatusH\x04R\x06status\
    \x88\x01\x01\",\n\x04Type\x12\x0b\n\x07RESERVE\x10\0\x12\x0b\n\x07CONNEC\
    T\x10\x01\x12\n\n\x06STATUS\x10\x02B\x07\n\x05_typeB\x07\n\x05_peerB\x0e\
    \n\x0c_reservationB\x08\n\x06_limitB\t\n\x07_status\"\xea\x01\n\x0bStopM\
    essage\x12*\n\x04type\x18\x01\x20\x01(\x0e2\x11.StopMessage.TypeH\0R\x04\
    type\x88\x01\x01\x12\x1e\n\x04peer\x18\x02\x20\x01(\x0b2\x05.PeerH\x01R\
    \x04peer\x88\x01\x01\x12!\n\x05limit\x18\x03\x20\x01(\x0b2\x06.LimitH\
    \x02R\x05limit\x88\x01\x01\x12$\n\x06status\x18\x04\x20\x01(\x0e2\x07.St\
    atusH\x03R\x06status\x88\x01\x01\"\x1f\n\x04Type\x12\x0b\n\x07CONNECT\
    \x10\0\x12\n\n\x06STATUS\x10\x01B\x07\n\x05_typeB\x07\n\x05_peerB\x08\n\
    \x06_limitB\t\n\x07_status\"8\n\x04Peer\x12\x13\n\x02id\x18\x01\x20\x01(\
    \x0cH\0R\x02id\x88\x01\x01\x12\x14\n\x05addrs\x18\x02\x20\x03(\x0cR\x05a\
    ddrsB\x05\n\x03_id\"v\n\x0bReservation\x12\x1b\n\x06expire\x18\x01\x20\
    \x01(\x04H\0R\x06expire\x88\x01\x01\x12\x14\n\x05addrs\x18\x02\x20\x03(\
    \x0cR\x05addrs\x12\x1d\n\x07voucher\x18\x03\x20\x01(\x0cH\x01R\x07vouche\
    r\x88\x01\x01B\t\n\x07_expireB\n\n\x08_voucher\"W\n\x05Limit\x12\x1f\n\
    \x08duration\x18\x01\x20\x01(\rH\0R\x08duration\x88\x01\x01\x12\x17\n\
    \x04data\x18\x02\x20\x01(\x04H\x01R\x04data\x88\x01\x01B\x0b\n\t_duratio\
    nB\x07\n\x05_data*\xca\x01\n\x06Status\x12\n\n\x06UNUSED\x10\0\x12\x06\n\
    \x02OK\x10d\x12\x18\n\x13RESERVATION_REFUSED\x10\xc8\x01\x12\x1c\n\x17RE\
    SOURCE_LIMIT_EXCEEDED\x10\xc9\x01\x12\x16\n\x11PERMISSION_DENIED\x10\xca\
    \x01\x12\x16\n\x11CONNECTION_FAILED\x10\xcb\x01\x12\x13\n\x0eNO_RESERVAT\
    ION\x10\xcc\x01\x12\x16\n\x11MALFORMED_MESSAGE\x10\x90\x03\x12\x17\n\x12\
    UNEXPECTED_MESSAGE\x10\x91\x03b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(Voucher::generated_message_descriptor_data());
            messages.push(HopMessage::generated_message_descriptor_data());
            messages.push(StopMessage::generated_message_descriptor_data());
            messages.push(Peer::generated_message_descriptor_data());
            messages.push(Reservation::generated_message_descriptor_data());
            messages.push(Limit::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(Status::generated_enum_descriptor_data());
            enums.push(hop_message::Type::generated_enum_descriptor_data());
            enums.push(stop_message::Type::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
