// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `autonat.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:Message)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Message {
    // message fields
    // @@protoc_insertion_point(field:Message.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<message::MessageType>>,
    // @@protoc_insertion_point(field:Message.dial)
    pub dial: ::protobuf::MessageField<message::Dial>,
    // @@protoc_insertion_point(field:Message.dialResponse)
    pub dialResponse: ::protobuf::MessageField<message::DialResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // optional .Message.MessageType type = 1;

    pub fn type_(&self) -> message::MessageType {
        match self.type_ {
            Some(e) => e.enum_value_or(message::MessageType::DIAL),
            None => message::MessageType::DIAL,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: message::MessageType) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &Message| { &m.type_ },
            |m: &mut Message| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, message::Dial>(
            "dial",
            |m: &Message| { &m.dial },
            |m: &mut Message| { &mut m.dial },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, message::DialResponse>(
            "dialResponse",
            |m: &Message| { &m.dialResponse },
            |m: &mut Message| { &mut m.dialResponse },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.dial)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.dialResponse)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.dial.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.dialResponse.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.dial.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.dialResponse.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.dial.clear();
        self.dialResponse.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: Message = Message {
            type_: ::std::option::Option::None,
            dial: ::protobuf::MessageField::none(),
            dialResponse: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Message`
pub mod message {
    // @@protoc_insertion_point(message:Message.PeerInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PeerInfo {
        // message fields
        // @@protoc_insertion_point(field:Message.PeerInfo.id)
        pub id: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:Message.PeerInfo.addrs)
        pub addrs: ::std::vec::Vec<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:Message.PeerInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PeerInfo {
        fn default() -> &'a PeerInfo {
            <PeerInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl PeerInfo {
        pub fn new() -> PeerInfo {
            ::std::default::Default::default()
        }

        // optional bytes id = 1;

        pub fn id(&self) -> &[u8] {
            match self.id.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_id(&mut self) {
            self.id = ::std::option::Option::None;
        }

        pub fn has_id(&self) -> bool {
            self.id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
            self.id = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.id.is_none() {
                self.id = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.id.as_mut().unwrap()
        }

        // Take field
        pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
            self.id.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "id",
                |m: &PeerInfo| { &m.id },
                |m: &mut PeerInfo| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "addrs",
                |m: &PeerInfo| { &m.addrs },
                |m: &mut PeerInfo| { &mut m.addrs },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PeerInfo>(
                "Message.PeerInfo",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PeerInfo {
        const NAME: &'static str = "PeerInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.id = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    18 => {
                        self.addrs.push(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.id.as_ref() {
                my_size += ::protobuf::rt::bytes_size(1, &v);
            }
            for value in &self.addrs {
                my_size += ::protobuf::rt::bytes_size(2, &value);
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.id.as_ref() {
                os.write_bytes(1, v)?;
            }
            for v in &self.addrs {
                os.write_bytes(2, &v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PeerInfo {
            PeerInfo::new()
        }

        fn clear(&mut self) {
            self.id = ::std::option::Option::None;
            self.addrs.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PeerInfo {
            static instance: PeerInfo = PeerInfo {
                id: ::std::option::Option::None,
                addrs: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PeerInfo {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Message.PeerInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PeerInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PeerInfo {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:Message.Dial)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Dial {
        // message fields
        // @@protoc_insertion_point(field:Message.Dial.peer)
        pub peer: ::protobuf::MessageField<PeerInfo>,
        // special fields
        // @@protoc_insertion_point(special_field:Message.Dial.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Dial {
        fn default() -> &'a Dial {
            <Dial as ::protobuf::Message>::default_instance()
        }
    }

    impl Dial {
        pub fn new() -> Dial {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PeerInfo>(
                "peer",
                |m: &Dial| { &m.peer },
                |m: &mut Dial| { &mut m.peer },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Dial>(
                "Message.Dial",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Dial {
        const NAME: &'static str = "Dial";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.peer)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.peer.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.peer.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Dial {
            Dial::new()
        }

        fn clear(&mut self) {
            self.peer.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Dial {
            static instance: Dial = Dial {
                peer: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Dial {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Message.Dial").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Dial {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Dial {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:Message.DialResponse)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DialResponse {
        // message fields
        // @@protoc_insertion_point(field:Message.DialResponse.status)
        pub status: ::std::option::Option<::protobuf::EnumOrUnknown<ResponseStatus>>,
        // @@protoc_insertion_point(field:Message.DialResponse.statusText)
        pub statusText: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:Message.DialResponse.addr)
        pub addr: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:Message.DialResponse.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DialResponse {
        fn default() -> &'a DialResponse {
            <DialResponse as ::protobuf::Message>::default_instance()
        }
    }

    impl DialResponse {
        pub fn new() -> DialResponse {
            ::std::default::Default::default()
        }

        // optional .Message.ResponseStatus status = 1;

        pub fn status(&self) -> ResponseStatus {
            match self.status {
                Some(e) => e.enum_value_or(ResponseStatus::OK),
                None => ResponseStatus::OK,
            }
        }

        pub fn clear_status(&mut self) {
            self.status = ::std::option::Option::None;
        }

        pub fn has_status(&self) -> bool {
            self.status.is_some()
        }

        // Param is passed by value, moved
        pub fn set_status(&mut self, v: ResponseStatus) {
            self.status = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }

        // optional string statusText = 2;

        pub fn statusText(&self) -> &str {
            match self.statusText.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_statusText(&mut self) {
            self.statusText = ::std::option::Option::None;
        }

        pub fn has_statusText(&self) -> bool {
            self.statusText.is_some()
        }

        // Param is passed by value, moved
        pub fn set_statusText(&mut self, v: ::std::string::String) {
            self.statusText = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_statusText(&mut self) -> &mut ::std::string::String {
            if self.statusText.is_none() {
                self.statusText = ::std::option::Option::Some(::std::string::String::new());
            }
            self.statusText.as_mut().unwrap()
        }

        // Take field
        pub fn take_statusText(&mut self) -> ::std::string::String {
            self.statusText.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bytes addr = 3;

        pub fn addr(&self) -> &[u8] {
            match self.addr.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_addr(&mut self) {
            self.addr = ::std::option::Option::None;
        }

        pub fn has_addr(&self) -> bool {
            self.addr.is_some()
        }

        // Param is passed by value, moved
        pub fn set_addr(&mut self, v: ::std::vec::Vec<u8>) {
            self.addr = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_addr(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.addr.is_none() {
                self.addr = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.addr.as_mut().unwrap()
        }

        // Take field
        pub fn take_addr(&mut self) -> ::std::vec::Vec<u8> {
            self.addr.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "status",
                |m: &DialResponse| { &m.status },
                |m: &mut DialResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "statusText",
                |m: &DialResponse| { &m.statusText },
                |m: &mut DialResponse| { &mut m.statusText },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "addr",
                |m: &DialResponse| { &m.addr },
                |m: &mut DialResponse| { &mut m.addr },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DialResponse>(
                "Message.DialResponse",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for DialResponse {
        const NAME: &'static str = "DialResponse";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    18 => {
                        self.statusText = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.addr = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.status {
                my_size += ::protobuf::rt::int32_size(1, v.value());
            }
            if let Some(v) = self.statusText.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.addr.as_ref() {
                my_size += ::protobuf::rt::bytes_size(3, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.status {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.statusText.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.addr.as_ref() {
                os.write_bytes(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DialResponse {
            DialResponse::new()
        }

        fn clear(&mut self) {
            self.status = ::std::option::Option::None;
            self.statusText = ::std::option::Option::None;
            self.addr = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DialResponse {
            static instance: DialResponse = DialResponse {
                status: ::std::option::Option::None,
                statusText: ::std::option::Option::None,
                addr: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for DialResponse {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Message.DialResponse").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for DialResponse {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DialResponse {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:Message.MessageType)
    pub enum MessageType {
        // @@protoc_insertion_point(enum_value:Message.MessageType.DIAL)
        DIAL = 0,
        // @@protoc_insertion_point(enum_value:Message.MessageType.DIAL_RESPONSE)
        DIAL_RESPONSE = 1,
    }

    impl ::protobuf::Enum for MessageType {
        const NAME: &'static str = "MessageType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<MessageType> {
            match value {
                0 => ::std::option::Option::Some(MessageType::DIAL),
                1 => ::std::option::Option::Some(MessageType::DIAL_RESPONSE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<MessageType> {
            match str {
                "DIAL" => ::std::option::Option::Some(MessageType::DIAL),
                "DIAL_RESPONSE" => ::std::option::Option::Some(MessageType::DIAL_RESPONSE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [MessageType] = &[
            MessageType::DIAL,
            MessageType::DIAL_RESPONSE,
        ];
    }

    impl ::protobuf::EnumFull for MessageType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Message.MessageType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for MessageType {
        fn default() -> Self {
            MessageType::DIAL
        }
    }

    impl MessageType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MessageType>("Message.MessageType")
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:Message.ResponseStatus)
    pub enum ResponseStatus {
        // @@protoc_insertion_point(enum_value:Message.ResponseStatus.OK)
        OK = 0,
        // @@protoc_insertion_point(enum_value:Message.ResponseStatus.E_DIAL_ERROR)
        E_DIAL_ERROR = 100,
        // @@protoc_insertion_point(enum_value:Message.ResponseStatus.E_DIAL_REFUSED)
        E_DIAL_REFUSED = 101,
        // @@protoc_insertion_point(enum_value:Message.ResponseStatus.E_BAD_REQUEST)
        E_BAD_REQUEST = 200,
        // @@protoc_insertion_point(enum_value:Message.ResponseStatus.E_INTERNAL_ERROR)
        E_INTERNAL_ERROR = 300,
    }

    impl ::protobuf::Enum for ResponseStatus {
        const NAME: &'static str = "ResponseStatus";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ResponseStatus> {
            match value {
                0 => ::std::option::Option::Some(ResponseStatus::OK),
                100 => ::std::option::Option::Some(ResponseStatus::E_DIAL_ERROR),
                101 => ::std::option::Option::Some(ResponseStatus::E_DIAL_REFUSED),
                200 => ::std::option::Option::Some(ResponseStatus::E_BAD_REQUEST),
                300 => ::std::option::Option::Some(ResponseStatus::E_INTERNAL_ERROR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ResponseStatus> {
            match str {
                "OK" => ::std::option::Option::Some(ResponseStatus::OK),
                "E_DIAL_ERROR" => ::std::option::Option::Some(ResponseStatus::E_DIAL_ERROR),
                "E_DIAL_REFUSED" => ::std::option::Option::Some(ResponseStatus::E_DIAL_REFUSED),
                "E_BAD_REQUEST" => ::std::option::Option::Some(ResponseStatus::E_BAD_REQUEST),
                "E_INTERNAL_ERROR" => ::std::option::Option::Some(ResponseStatus::E_INTERNAL_ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ResponseStatus] = &[
            ResponseStatus::OK,
            ResponseStatus::E_DIAL_ERROR,
            ResponseStatus::E_DIAL_REFUSED,
            ResponseStatus::E_BAD_REQUEST,
            ResponseStatus::E_INTERNAL_ERROR,
        ];
    }

    impl ::protobuf::EnumFull for ResponseStatus {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Message.ResponseStatus").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                ResponseStatus::OK => 0,
                ResponseStatus::E_DIAL_ERROR => 1,
                ResponseStatus::E_DIAL_REFUSED => 2,
                ResponseStatus::E_BAD_REQUEST => 3,
                ResponseStatus::E_INTERNAL_ERROR => 4,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ResponseStatus {
        fn default() -> Self {
            ResponseStatus::OK
        }
    }

    impl ResponseStatus {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ResponseStatus>("Message.ResponseStatus")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rautonat.proto\"\xfe\x03\n\x07Message\x12(\n\x04type\x18\x01\x20\x01(\
    \x0e2\x14.Message.MessageTypeR\x04type\x12!\n\x04dial\x18\x02\x20\x01(\
    \x0b2\r.Message.DialR\x04dial\x129\n\x0cdialResponse\x18\x03\x20\x01(\
    \x0b2\x15.Message.DialResponseR\x0cdialResponse\x1a0\n\x08PeerInfo\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\x0cR\x02id\x12\x14\n\x05addrs\x18\x02\x20\
    \x03(\x0cR\x05addrs\x1a-\n\x04Dial\x12%\n\x04peer\x18\x01\x20\x01(\x0b2\
    \x11.Message.PeerInfoR\x04peer\x1as\n\x0cDialResponse\x12/\n\x06status\
    \x18\x01\x20\x01(\x0e2\x17.Message.ResponseStatusR\x06status\x12\x1e\n\n\
    statusText\x18\x02\x20\x01(\tR\nstatusText\x12\x12\n\x04addr\x18\x03\x20\
    \x01(\x0cR\x04addr\"*\n\x0bMessageType\x12\x08\n\x04DIAL\x10\0\x12\x11\n\
    \rDIAL_RESPONSE\x10\x01\"i\n\x0eResponseStatus\x12\x06\n\x02OK\x10\0\x12\
    \x10\n\x0cE_DIAL_ERROR\x10d\x12\x12\n\x0eE_DIAL_REFUSED\x10e\x12\x12\n\r\
    E_BAD_REQUEST\x10\xc8\x01\x12\x15\n\x10E_INTERNAL_ERROR\x10\xac\x02\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Message::generated_message_descriptor_data());
            messages.push(message::PeerInfo::generated_message_descriptor_data());
            messages.push(message::Dial::generated_message_descriptor_data());
            messages.push(message::DialResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(message::MessageType::generated_enum_descriptor_data());
            enums.push(message::ResponseStatus::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
